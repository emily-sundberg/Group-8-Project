---
title: "Exploratory Data Analysis"
format:
  html:
    code-overflow: wrap
    code-fold: true
    toc: false

execute:
  echo: false
  eval: true
  output: true
  freeze: auto
---

```{python}
import pandas as pd
import plotly.express as px
import plotly.io as pio
from pyspark.sql import SparkSession
import re
import numpy as np
import plotly.graph_objects as go
from pyspark.sql.functions import col, split, explode, regexp_replace, transform, when
from pyspark.sql import functions as F
from pyspark.sql.functions import col, monotonically_increasing_id

np.random.seed(42)

pio.renderers.default = "notebook"

spark = SparkSession.builder.appName("LightcastCleanedData").getOrCreate()

eda = spark.read.option("header", "true").option("inferSchema", "true").option("multiLine","true").option("escape", "\"").csv("./data/lightcast_cleaned.csv")

eda.show(15)

```




## Introduction

The following visualizations are based on the lightcast job postings data frame that was cleaned in the previous section. This analysis explores different facets of the data specifically related to the political affiliation of the states and the different job postings in each state. We also take a closer look at AI related jobs and the impact of political climate on salary. 


## Exploring the Salary by State Political Affiliation

```{python}
from pyspark.sql import functions as F
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

eda = eda.na.drop(subset=["AFFILIATION"])

# Aggregate the Data 
salary_by_affiliation = (
    eda.groupBy("AFFILIATION","NAICS2_NAME")
      .agg(
          F.mean("SALARY").alias("avg_salary"),
          F.expr("percentile_approx(SALARY, 0.5)").alias("median_salary"),
          F.count("*").alias("count")
      )
      .orderBy("avg_salary", ascending=False)
)

#salary_by_affiliation.show()

pdf = salary_by_affiliation.toPandas()

# visualize the data
fig = px.bar(
    pdf,
    x="NAICS2_NAME",
    y="avg_salary",
    color="AFFILIATION",
    barmode="group",
    hover_data=["median_salary", "count"], 
    labels={
        "NAICS2_NAME": "Industry (NAICS2)",
        "avg_salary": "Average Salary",
        "AFFILIATION": "Political Affiliation"
    },
    title="Average Salary by Industry and Political Affiliation"
)

fig.update_layout(
    xaxis_tickangle=-45,
    yaxis_title="Average Salary",
    xaxis_title="Industry (NAICS2)",
    legend_title="Affiliation",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/salary_affiliation.html")

```

```{=html}
<iframe width="900" height="650" src="./output/salary_affiliation.html" title="Salary By State Political Affiliation"></iframe>
```

This data clearly shows that average salaries are slightly higher in Blue states vs Red States across nearly all NAICS2 categories. In red states, Professional, Scientific, and Technical Services has a slightly higher average salary. 

## Exploring the minimum education level by political affiliation


```{python}
import plotly.express as px

# Aggregate the Data 
edulevel_by_affiliation = (
    eda.groupBy("AFFILIATION","MIN_EDULEVELS_NAME")
      .agg(
           F.count("*").alias("count"),
          F.mean("SALARY").alias("avg_salary")
      )
)

edulevel_by_affiliation.show()

pdf = edulevel_by_affiliation.toPandas()

# visualize the data
fig = px.bar(
    pdf,
    x="MIN_EDULEVELS_NAME",
    y="count",
    color="AFFILIATION",
    barmode="group",
    title="Education Level Requirements by Political Affiliation",
    hover_data=["avg_salary"],  # optional: show avg salary on hover
    color_discrete_map={"Blue": "#1f77b4", "Red": "#d62728"}
)

fig.update_layout(
    xaxis_title="Minimum Education Level",
    yaxis_title="Number of Postings",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/education_affiliation.html")


```


```{=html}
<iframe width="900" height="650" src="./output/education_affiliation.html" title="Min Education Levels by State Political Affiliation"></iframe>
```


This graph shows us the comparison of job postings by political affiliation and minimum education level. As you can see, red states have far more job postings for lower education levels such as High School, Associate Degree, or Bachelor's degree, and blue states have more postings requiring a Master's Degree or higher. 

```{python}
fig = px.bar(
    pdf,
    x="MIN_EDULEVELS_NAME",
    y="avg_salary",
    color="AFFILIATION",
    barmode="group",
    title="Average Salary by Education Level and Political Affiliation",
    hover_data=["count"],
    color_discrete_map={"Blue": "#1f77b4", "Red": "#d62728"}
)

fig.update_layout(
    xaxis_title="Minimum Education Level",
    yaxis_title="Average Salary (USD)",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/salary_education_affiliation.html")


```


```{=html}
<iframe width="900" height="650" src="./output/salary_education_affiliation.html" title="Average Salary by Min Education Levels and State Political Affiliation"></iframe>
```


This figure tells us that despite red states having more job postings with education level requirements below a Master's degree, the salaries in Blue states are higher for every single minimum education level. This could be attributed to a higher cost of living in most blue states. 

## AI Jobs Analysis

```{python}
from pyspark.sql import functions as F

ai_keywords = [
    "artificial intelligence", "machine learning", "deep learning",
    "neural network", "nlp", "natural language processing",
    "computer vision", "data science", "data scientist",
    "ai engineer", "ai research", "ml engineer",
    "tensorflow", "pytorch", "keras", "hugging face", "openai", "scikit-learn"
]
pattern = "|".join([f"(?i){kw}" for kw in ai_keywords])

ai_jobs = eda.filter(
    F.col("SKILLS_NAME").rlike(pattern) |
    F.col("SPECIALIZED_SKILLS_NAME").rlike(pattern) |
    F.col("SOFTWARE_SKILLS_NAME").rlike(pattern) |
    F.col("COMMON_SKILLS_NAME").rlike(pattern) |
    F.col("LOT_OCCUPATION_NAME").rlike(pattern) |
    F.col("ONET_NAME").rlike(pattern)
)

ai_jobs.select("MIN_EDULEVELS_NAME","LOT_OCCUPATION_NAME", "SKILLS_NAME", "SALARY", "STATE_ABBREVIATION","AFFILIATION","NAICS2_NAME","NAICS3_NAME","NAICS4_NAME","NAICS5_NAME","NAICS6_NAME").show(10, truncate=False)
```

```{python}
import plotly.express as px

# Aggregate the Data 
ai_job_analysis = (
    ai_jobs.groupBy("AFFILIATION","MIN_EDULEVELS_NAME")
      .agg(
           F.count("*").alias("count"),
          F.mean("SALARY").alias("avg_salary")
      )
)

ai_job_analysis.show()

ai_pdf = ai_job_analysis.toPandas()

# visualize the data
fig = px.bar(
    ai_pdf,
    x="MIN_EDULEVELS_NAME",
    y="count",
    color="AFFILIATION",
    barmode="group",
    title="AI jobs Education Level Requirements by Political Affiliation",
    hover_data=["avg_salary"],
    color_discrete_map={"Blue": "#1f77b4", "Red": "#d62728"}
)

fig.update_layout(
    xaxis_title="Minimum Education Level",
    yaxis_title="Number of Postings",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/AI_education_affiliation.html")

```


```{=html}
<iframe width="900" height="650" src="./output/AI_education_affiliation.html" title="AI Jobs by Min Education Levels and State Political Affiliation"></iframe>
```


This figure shows us the number of postings just with certain key words related to AI. It groups by education level and political affiliation. The graph tells us that the distribution of number of  AI job postings across education level and affiliation mirrors that of the larger data set. Thus, AI jobs are not posted at any higher frequency across red or blue states than any other job.

```{python}
fig = px.bar(
    ai_pdf,
    x="MIN_EDULEVELS_NAME",
    y="avg_salary",
    color="AFFILIATION",
    barmode="group",
    title="AI Jobs Average Salary by Education Level and Political Affiliation",
    hover_data=["count"], 
    color_discrete_map={"Blue": "#1f77b4", "Red": "#d62728"}
)

fig.update_layout(
    xaxis_title="Minimum Education Level",
    yaxis_title="Average Salary (USD)",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/AI_salary_education_affiliation.html")

```

```{=html}
<iframe width="900" height="650" src="./output/AI_salary_education_affiliation.html" title="AI Job Salaries by Min Education Levels and State Political Affiliation"></iframe>
```

Similarly, in this figure, AI Jobs show salary distributions equivalent to that of jobs in other industries. Like the general analysis, blue states offer higher salaries for AI jobs across each of education levels. Again, this is likely due to the higher cost of living in most blue states. 


```{python}
state_counts = (
    ai_jobs.groupBy("STATE_ABBREVIATION", "AFFILIATION")
       .agg(
           F.count("*").alias("count"),
           F.mean("SALARY").alias("avg_salary")
       )
       .orderBy(F.desc("count"))
)
state_counts.show(10, truncate=False)

state_counts_pd = state_counts.toPandas()

import plotly.express as px

state_counts_pd_sorted = state_counts_pd.sort_values("count", ascending=True)

fig = px.bar(
    state_counts_pd_sorted,
    x="count",
    y="STATE_ABBREVIATION",
    orientation="h",
    color = "AFFILIATION",
    color_discrete_map={
    "Red": "red",
    "Blue": "blue"
    },
    hover_data=["avg_salary"],  # Show average salary on hover
    title="Number of AI Job Postings by State and Affiliation",
    labels={"count": "Job Postings", "STATE_ABBREVIATION": "State"}
)

fig.update_layout(
    yaxis={'categoryorder':'total ascending'},
    xaxis_title="Number of Job Postings",
    yaxis_title="State",
    legend_title="Affiliation",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/AI_byState.html")
```


```{=html}
<iframe width="900" height="900" src="./output/AI_byState.html" title="Number of AI Job Postings by State"></iframe>
```

This graph clearly shows that of the top 5 states with the most number of AI job postings, 4/5 of them are blue states. 


```{python}
import plotly.express as px
from pyspark.sql import functions as F

ai_naics = (ai_jobs.filter(col("NAICS2_NAME") =="Professional, Scientific, and Technical Services")
)

naics_levels = ["NAICS4_NAME", "NAICS5_NAME", "NAICS6_NAME"]

ai_naicscounts_dfs = []
for level in naics_levels:
    df = (
        ai_naics.groupBy(level)
           .agg(F.count("*").alias("count"))
           .withColumnRenamed(level, "Industry")
           .withColumn("NAICS_Level", F.lit(level))
    )
    ai_naicscounts_dfs.append(df)

combined_ai_naicscounts = ai_naicscounts_dfs[0]
for df in ai_naicscounts_dfs[1:]:
    combined_ai_naicscounts = combined_ai_naicscounts.union(df)

combined_ai_naicscounts = combined_ai_naicscounts.orderBy(F.desc("count"))


ai_naics_combined = combined_ai_naicscounts.toPandas()

ai_naics_combined

```


```{python}
fig = px.bar(
    ai_naics_combined,
    x="Industry",
    y="count",
    color = "NAICS_Level"
    barmode="group",
    hover_data=["NAICS_Level", "count"],
    title="Job Posting Counts Across NAICS Levels 2–6",
    labels={"count": "Job Postings", "Industry": "Industry", "NAICS_Level": "NAICS Level"}
)

# Rotate x-axis labels for readability
fig.update_layout(
    xaxis_tickangle=-45,
    yaxis_title="Number of Job Postings",
    xaxis_title="Industry",
    template="plotly_white"
)

fig.show()

fig.write_html("./output/AI_industries.html")

```



```{=html}
<iframe width="900" height="900" src="./output/AI_industries.html" title="Number of AI Job Postings by Industry"></iframe>
```

This graph is showing us the number of job postings by NAICS. For AI jobs, the NAICS with the largest number of AI job postings. Computer Systems Design is predominate NAICS with consulting services coming in second. 

```{python}
#eda.select("NAICS2_NAME").distinct().show(25, truncate = False)

from pyspark.sql import functions as F

gender_jobs = spark.read.option("header", "true").option("inferSchema", "true").option("multiLine","true").option("escape", "\"").csv("./data/Gender_Industries.csv")
gender_jobs.createOrReplaceTempView("gender_industries")


sorted_gender_jobs = (
    gender_jobs
    .orderBy(F.desc("TOTAL_NUMBER_OF_WOMEN"))
    .select("NAICS_NAME", "NUMBER_OF_PEOPLE","TOTAL_NUMBER_OF_WOMEN", "PERCENT_WOMEN")
    .limit(10)
)

#sorted_gender_jobs.show()

sorted_gender_jobs = sorted_gender_jobs.toPandas()

```


```{python}
import plotly.graph_objects as go

fig = go.Figure()

fig.add_trace(go.Bar(
    x=sorted_gender_jobs["NAICS_NAME"],
    y=sorted_gender_jobs["TOTAL_NUMBER_OF_WOMEN"],
    name="Number of Women",
    yaxis="y1"
))

fig.add_trace(go.Scatter(
    x=sorted_gender_jobs["NAICS_NAME"],
    y=sorted_gender_jobs["PERCENT_WOMEN"],
    name="% Women",
    yaxis="y2",
    mode="lines+markers"
))


fig.update_layout(
    title="Top 10 Industries by Number of Women",
    xaxis=dict(title="Industry (NAICS_NAME)"),
    yaxis=dict(title="Number of Women", side="left"),
    yaxis2=dict(
        title="% Women",
        overlaying="y",
        side="right"
    ),
    legend=dict(x=0.02, y=0.98),
    template="plotly_white",
    xaxis_tickangle=-45
)

fig.show()

fig.write_html("./output/gender_and_industry.html")
```


```{=html}
<iframe width="900" height="900" src="./output/gender_and_industry.html" title="Industries With The Most Women vs Percent of Women in the Industry"></iframe>
```

The above graph has two different important features. First, it shows the top 10 industries for women on the bar chart, sorted by the overall number of women according the U.S. Bureau of Labor Statistics. The second important feature is the line chart which shows the percentage of women in that field. As you can see, some of the most female dominated industries do not have very many women in them and some of the industries with the most women are heavily male dominated. 