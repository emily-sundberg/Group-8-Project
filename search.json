[
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "This data clearly shows that average salaries are slightly higher in Blue states vs Red States across nearly all NAICS2 categories. In red states, Professional, Scientific, and Technical Services has a slightly higher average salary."
  },
  {
    "objectID": "eda.html#exploring-the-salary-by-state-political-affiliation",
    "href": "eda.html#exploring-the-salary-by-state-political-affiliation",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "This data clearly shows that average salaries are slightly higher in Blue states vs Red States across nearly all NAICS2 categories. In red states, Professional, Scientific, and Technical Services has a slightly higher average salary."
  },
  {
    "objectID": "eda.html#exploring-the-minimum-education-level-by-political-affiliation",
    "href": "eda.html#exploring-the-minimum-education-level-by-political-affiliation",
    "title": "Exploratory Data Analysis",
    "section": "Exploring the minimum education level by political affiliation",
    "text": "Exploring the minimum education level by political affiliation\n\nThis graph shows us the comparison of job postings by political affiliation and minimum education level. As you can see, red states have far more job postings for lower education levels such as High School, Associate Degree, or Bachelor’s degree, and blue states have more postings requiring a Master’s Degree or higher.\n\nThis figure tells us that despite red states having more job postings with education level requirements below a Master’s degree, the salaries in Blue states are higher for every single minimum education level. This could be attributed to a higher cost of living in most blue states."
  },
  {
    "objectID": "eda.html#ai-jobs-analysis",
    "href": "eda.html#ai-jobs-analysis",
    "title": "Exploratory Data Analysis",
    "section": "AI Jobs Analysis",
    "text": "AI Jobs Analysis\n\nThis figure shows us the number of postings just with certain key words related to AI. It groups by education level and political affiliation. The graph tells us that the distribution of number of AI job postings across education level and affiliation mirrors that of the larger data set. Thus, AI jobs are not posted at any higher frequency across red or blue states than any other job.\n\nSimilarly, in this figure, AI Jobs show salary distributions equivalent to that of jobs in other industries. Like the general analysis, blue states offer higher salaries for AI jobs across each of education levels. Again, this is likely due to the higher cost of living in most blue states.\n\nThis graph clearly shows that of the top 5 states with the most number of AI job postings, 4/5 of them are blue states.\n\nThis graph is showing us the number of job postings by NAICS. For AI jobs, the NAICS with the largest number of AI job postings. Computer Systems Design is predominate NAICS with consulting services coming in second."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About This Project",
    "section": "",
    "text": "This project examines the complex relationship between gender disparities in employment, hiring patterns, wage gaps, and political geography across the United States. We pay particular attention to representation in AI and technology fields."
  },
  {
    "objectID": "about.html#research-focus",
    "href": "about.html#research-focus",
    "title": "About This Project",
    "section": "",
    "text": "This project examines the complex relationship between gender disparities in employment, hiring patterns, wage gaps, and political geography across the United States. We pay particular attention to representation in AI and technology fields."
  },
  {
    "objectID": "about.html#our-four-core-questions",
    "href": "about.html#our-four-core-questions",
    "title": "About This Project",
    "section": "Our Four Core Questions",
    "text": "Our Four Core Questions\n\nHiring Patterns: How do men and women fare differently in hiring across various industries?\nPolitical Geography: Do employment disparities correlate with state political affiliations (red vs. blue states)?\nAI Sector Focus: Is women’s underrepresentation in AI fields more pronounced in conservative states?\nWage Analysis: How do gender wage gaps vary across different political contexts?"
  },
  {
    "objectID": "about.html#why-this-matters",
    "href": "about.html#why-this-matters",
    "title": "About This Project",
    "section": "Why This Matters",
    "text": "Why This Matters\n\nAI and tech sectors are rapidly growing and high-paying\nPolitical policies at state level impact workplace equality\nUnderstanding regional differences can inform policy decisions\nIdentifying barriers helps create targeted interventions"
  },
  {
    "objectID": "about.html#methodology",
    "href": "about.html#methodology",
    "title": "About This Project",
    "section": "Methodology",
    "text": "Methodology\nOur analysis will include:\n\nData Sources:\n\nBureau of Labor Statistics employment data\nState-level political affiliation data\nIndustry-specific hiring and salary information\nAI/tech sector demographics\n\nAnalytical Approach:\n\nStatistical analysis of hiring patterns\nGeographic mapping of disparities\nCorrelation analysis between political affiliation and employment outcomes\nComparative analysis across industries"
  },
  {
    "objectID": "about.html#team",
    "href": "about.html#team",
    "title": "About This Project",
    "section": "Team",
    "text": "Team\nGroup 8 - AD 688 Web Analytics\n\nPranathi Nagasai\nEmily Sundberg"
  },
  {
    "objectID": "about.html#course-information",
    "href": "about.html#course-information",
    "title": "About This Project",
    "section": "Course Information",
    "text": "Course Information\nBoston University Metropolitan College\nAD 688: Web Analytics\nFall 2025"
  },
  {
    "objectID": "about.html#timeline",
    "href": "about.html#timeline",
    "title": "About This Project",
    "section": "Timeline",
    "text": "Timeline\n\nData collection and cleaning\nExploratory data analysis\nStatistical modeling\nVisualization development\nFinal report and presentation"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gender Disparities in Hiring & Political Influence",
    "section": "",
    "text": "This research investigates the intersection of gender-based employment patterns and political geography in the United States.\n\n\n\n\nWe analyze gender representation and hiring trends across multiple sectors:\n\nTechnology Sector: Software development, AI/ML, data science\nHealthcare: Medical professionals, administrative roles\nFinance: Banking, investment, fintech\nManufacturing: Production, engineering, management\nService Industries: Retail, hospitality, education\n\nKey metrics examined: - Hiring rates by gender - Retention rates - Promotion patterns - Industry-specific barriers\n\n\n\nExamining state-level political affiliations and their relationship with:\n\nRed States (Conservative-leaning)\n\nGender hiring ratios\nWorkplace policies\nWage structures\n\nBlue States (Liberal-leaning)\n\nGender hiring ratios\nWorkplace policies\nWage structures\n\nSwing States: Comparative analysis of mixed political environments\n\n\n\n\nFocused investigation on the technology sector, specifically:\n\nAI and Machine Learning roles\n\nData scientists\nML engineers\nAI researchers\n\nWomen’s representation comparison:\n\nConservative states (red states)\nLiberal states (blue states)\nNational averages\n\nFactors analyzed:\n\nEducational pipeline differences\nCompany culture and policies\nState-level STEM initiatives\nIndustry concentration by state\n\n\n\n\n\nComprehensive wage analysis examining:\n\nGender wage gaps across:\n\nRed states\nBlue states\nSwing states\n\nIndustry-specific wage disparities:\n\nTech and AI fields\nHealthcare\nFinance\nManufacturing\n\nControlling for:\n\nExperience level\nEducation\nJob title/role\nCompany size\nCost of living adjustments\n\nPolitical affiliation impact:\n\nState minimum wage policies\nEqual pay legislation\nWorkplace protection laws\n\n\n\n\n\n\nWe expect this analysis will reveal that political geography influences gender-based employment outcomes, particularly in emerging high-wage sectors such as AI and technology.\n\n\n\n[Your data sources and analytical methods will go here]\n\n\n\n[Interactive charts and graphs will be added here]\n\n\n\n[Research findings will be presented here]"
  },
  {
    "objectID": "index.html#research-questions",
    "href": "index.html#research-questions",
    "title": "Gender Disparities in Hiring & Political Influence",
    "section": "",
    "text": "We analyze gender representation and hiring trends across multiple sectors:\n\nTechnology Sector: Software development, AI/ML, data science\nHealthcare: Medical professionals, administrative roles\nFinance: Banking, investment, fintech\nManufacturing: Production, engineering, management\nService Industries: Retail, hospitality, education\n\nKey metrics examined: - Hiring rates by gender - Retention rates - Promotion patterns - Industry-specific barriers\n\n\n\nExamining state-level political affiliations and their relationship with:\n\nRed States (Conservative-leaning)\n\nGender hiring ratios\nWorkplace policies\nWage structures\n\nBlue States (Liberal-leaning)\n\nGender hiring ratios\nWorkplace policies\nWage structures\n\nSwing States: Comparative analysis of mixed political environments\n\n\n\n\nFocused investigation on the technology sector, specifically:\n\nAI and Machine Learning roles\n\nData scientists\nML engineers\nAI researchers\n\nWomen’s representation comparison:\n\nConservative states (red states)\nLiberal states (blue states)\nNational averages\n\nFactors analyzed:\n\nEducational pipeline differences\nCompany culture and policies\nState-level STEM initiatives\nIndustry concentration by state\n\n\n\n\n\nComprehensive wage analysis examining:\n\nGender wage gaps across:\n\nRed states\nBlue states\nSwing states\n\nIndustry-specific wage disparities:\n\nTech and AI fields\nHealthcare\nFinance\nManufacturing\n\nControlling for:\n\nExperience level\nEducation\nJob title/role\nCompany size\nCost of living adjustments\n\nPolitical affiliation impact:\n\nState minimum wage policies\nEqual pay legislation\nWorkplace protection laws"
  },
  {
    "objectID": "index.html#expected-findings",
    "href": "index.html#expected-findings",
    "title": "Gender Disparities in Hiring & Political Influence",
    "section": "",
    "text": "We expect this analysis will reveal that political geography influences gender-based employment outcomes, particularly in emerging high-wage sectors such as AI and technology."
  },
  {
    "objectID": "index.html#methodology",
    "href": "index.html#methodology",
    "title": "Gender Disparities in Hiring & Political Influence",
    "section": "",
    "text": "[Your data sources and analytical methods will go here]"
  },
  {
    "objectID": "index.html#data-visualizations",
    "href": "index.html#data-visualizations",
    "title": "Gender Disparities in Hiring & Political Influence",
    "section": "",
    "text": "[Interactive charts and graphs will be added here]"
  },
  {
    "objectID": "index.html#conclusions",
    "href": "index.html#conclusions",
    "title": "Gender Disparities in Hiring & Political Influence",
    "section": "",
    "text": "[Research findings will be presented here]"
  },
  {
    "objectID": "ml_methods.html",
    "href": "ml_methods.html",
    "title": "ML Methods",
    "section": "",
    "text": "Show code\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import mean_squared_error, r2_score, silhouette_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Set Plotly theme\npio.templates.default = \"plotly_white\"\n\nprint(\"✓ All libraries loaded successfully!\")"
  },
  {
    "objectID": "ml_methods.html#data-loading-and-exploration",
    "href": "ml_methods.html#data-loading-and-exploration",
    "title": "ML Methods",
    "section": "Data Loading and Exploration",
    "text": "Data Loading and Exploration\n\n\nShow code\n# Load lightcast job postings data\ndf = pd.read_csv('data/lightcast_job_postings.csv')\n\nprint(f\"Dataset Shape: {df.shape[0]:,} rows × {df.shape[1]} columns\")\nprint(f\"\\nFirst few rows:\")\ndf.head()\n\n\n\n\nShow code\n# Check data quality\nprint(\"=\"*80)\nprint(\"DATA QUALITY ASSESSMENT\")\nprint(\"=\"*80)\n\n# Key columns for analysis\nkey_columns = ['SALARY', 'STATE', 'TITLE', 'NAICS_2022_2', 'SOC_2', 'ONET', 'LIGHTCAST_SECTORS']\n\ninfo_df = pd.DataFrame({\n    'Column': key_columns,\n    'Missing': [df[col].isnull().sum() if col in df.columns else 'N/A' for col in key_columns],\n    'Missing %': [f\"{(df[col].isnull().sum() / len(df) * 100):.2f}%\" if col in df.columns else 'N/A' for col in key_columns],\n    'Unique Values': [df[col].nunique() if col in df.columns else 'N/A' for col in key_columns]\n})\n\nprint(info_df.to_string(index=False))\n\n# Salary statistics\nif 'SALARY' in df.columns:\n    print(f\"\\nSalary Statistics:\")\n    print(f\"  Mean: ${df['SALARY'].mean():,.2f}\")\n    print(f\"  Median: ${df['SALARY'].median():,.2f}\")\n    print(f\"  Std Dev: ${df['SALARY'].std():,.2f}\")\n    print(f\"  Range: ${df['SALARY'].min():,.2f} - ${df['SALARY'].max():,.2f}\")"
  },
  {
    "objectID": "ml_methods.html#data-preprocessing",
    "href": "ml_methods.html#data-preprocessing",
    "title": "ML Methods",
    "section": "Data Preprocessing",
    "text": "Data Preprocessing\n\n\nShow code\n# Create working copy\ndf_clean = df.copy()\n\n# Remove rows with missing salary or state\nrequired_cols = ['SALARY', 'STATE']\ninitial_rows = len(df_clean)\ndf_clean = df_clean.dropna(subset=required_cols)\nremoved_rows = initial_rows - len(df_clean)\n\nprint(f\"Removed {removed_rows:,} rows with missing salary or state data\")\nprint(f\"Final dataset: {len(df_clean):,} rows\")\n\n\n\n\nShow code\n## Political Leaning Classification (Fixed)\n\n#| label: fix-fips-and-political-leaning\n#| code-fold: true\n\n# FIPS code to state abbreviation mapping\nfips_to_state = {\n    1: 'AL', 2: 'AK', 4: 'AZ', 5: 'AR', 6: 'CA', 8: 'CO', 9: 'CT', 10: 'DE',\n    11: 'DC', 12: 'FL', 13: 'GA', 15: 'HI', 16: 'ID', 17: 'IL', 18: 'IN',\n    19: 'IA', 20: 'KS', 21: 'KY', 22: 'LA', 23: 'ME', 24: 'MD', 25: 'MA',\n    26: 'MI', 27: 'MN', 28: 'MS', 29: 'MO', 30: 'MT', 31: 'NE', 32: 'NV',\n    33: 'NH', 34: 'NJ', 35: 'NM', 36: 'NY', 37: 'NC', 38: 'ND', 39: 'OH',\n    40: 'OK', 41: 'OR', 42: 'PA', 44: 'RI', 45: 'SC', 46: 'SD', 47: 'TN',\n    48: 'TX', 49: 'UT', 50: 'VT', 51: 'VA', 53: 'WA', 54: 'WV', 55: 'WI',\n    56: 'WY', 72: 'PR'\n}\n\n# Convert FIPS codes to state abbreviations\ndf_clean['STATE_ABBREV'] = df_clean['STATE'].apply(\n    lambda x: fips_to_state.get(int(x), 'Unknown') if pd.notna(x) else 'Unknown'\n)\n\n# Political classifications\nred_states = ['AL', 'AK', 'AR', 'FL', 'ID', 'IN', 'IA', 'KS', 'KY', \n              'LA', 'MS', 'MO', 'MT', 'NE', 'ND', 'OH', 'OK', 'SC', \n              'SD', 'TN', 'TX', 'UT', 'WV', 'WY']\n\nblue_states = ['CA', 'CO', 'CT', 'DE', 'HI', 'IL', 'ME', 'MD', 'MA', \n               'MI', 'MN', 'NH', 'NJ', 'NM', 'NY', 'OR', 'PA', 'RI', \n               'VT', 'VA', 'WA', 'WI', 'DC']\n\nswing_states = ['AZ', 'GA', 'NC', 'NV']\n\ndef assign_political_leaning(state_abbrev):\n    if pd.isna(state_abbrev) or state_abbrev == 'Unknown':\n        return 'Unknown'\n    state_abbrev = str(state_abbrev).upper()\n    if state_abbrev in red_states:\n        return 'Red'\n    elif state_abbrev in blue_states:\n        return 'Blue'\n    elif state_abbrev in swing_states:\n        return 'Swing'\n    else:\n        return 'Other'\n\ndf_clean['political_leaning'] = df_clean['STATE_ABBREV'].apply(assign_political_leaning)\n\nprint(\"=\"*60)\nprint(\"POLITICAL LEANING DISTRIBUTION (FIXED)\")\nprint(\"=\"*60)\nprint(df_clean['political_leaning'].value_counts())\nprint(\"\\nPercentage:\")\nprint((df_clean['political_leaning'].value_counts() / len(df_clean) * 100).round(2))\n\n\n\n\nShow code\n# Visualize political leaning distribution\nfig = px.pie(\n    values=df_clean['political_leaning'].value_counts().values,\n    names=df_clean['political_leaning'].value_counts().index,\n    title='Distribution of Jobs by Political Leaning of State',\n    hole=0.4,\n    color_discrete_map={'Red': '#FF6B6B', 'Blue': '#4ECDC4', 'Swing': '#FFD93D', 'Other': '#95A5A6'}\n)\nfig.update_layout(template=\"plotly_white\", height=400)\nfig.show()"
  },
  {
    "objectID": "ml_methods.html#k-means-clustering-unsupervised",
    "href": "ml_methods.html#k-means-clustering-unsupervised",
    "title": "ML Methods",
    "section": "K-Means Clustering (unsupervised)",
    "text": "K-Means Clustering (unsupervised)\n\nSetup and Feature Engineering\n\n\nShow code\n# Determine which reference label to use (SOC, NAICS, or ONET)\nreference_label = None\nfor label in ['SOC_2', 'NAICS_2022_2', 'ONET', 'LIGHTCAST_SECTORS']:\n    if label in df_clean.columns and df_clean[label].notna().sum() &gt; 0:\n        reference_label = label\n        print(f\"✓ Using {label} as reference label\")\n        break\n\nif reference_label is None:\n    print(\"No classification column found. Using TITLE as reference.\")\n    reference_label = 'TITLE'\n\nprint(f\"\\nReference Label: {reference_label}\")\nprint(f\"Unique values: {df_clean[reference_label].nunique():,}\")\nprint(f\"\\nTop 10 {reference_label} categories:\")\nprint(df_clean[reference_label].value_counts().head(10))\n\n\n\n\nView feature engineering code\n# Prepare features for clustering\ndf_cluster = df_clean.copy()\n\nprint(\"=\"*80)\nprint(\"FEATURE ENGINEERING FOR CLUSTERING\")\nprint(\"=\"*80)\n\n# Encode categorical variables\nencoders = {}\ncategorical_cols = ['STATE', 'TITLE', 'political_leaning', 'LIGHTCAST_SECTORS']\n\nprint(f\"\\nEncoding categorical variables:\")\nfor col in categorical_cols:\n    if col in df_cluster.columns:\n        le = LabelEncoder()\n        df_cluster[f'{col}_encoded'] = le.fit_transform(\n            df_cluster[col].fillna('Unknown').astype(str)\n        )\n        encoders[col] = le\n        print(f\"  ✓ {col}: {df_cluster[col].nunique()} unique values\")\n\n# Select clustering features\nclustering_features = ['SALARY']\n\nfor col in categorical_cols:\n    encoded_col = f'{col}_encoded'\n    if encoded_col in df_cluster.columns:\n        clustering_features.append(encoded_col)\n\n# Add years of experience if available\nif 'MIN_YEARS_EXPERIENCE' in df_cluster.columns:\n    df_cluster['MIN_YEARS_EXPERIENCE'] = pd.to_numeric(\n        df_cluster['MIN_YEARS_EXPERIENCE'], errors='coerce'\n    )\n    clustering_features.append('MIN_YEARS_EXPERIENCE')\n    print(f\"  ✓ MIN_YEARS_EXPERIENCE: numeric feature\")\n\nprint(f\"\\n📊 Total Clustering Features: {len(clustering_features)}\")\nprint(\"\\nFeature List:\")\nfor i, feature in enumerate(clustering_features, 1):\n    print(f\"  {i}. {feature}\")\n\n# Prepare feature matrix\nX_cluster = df_cluster[clustering_features].fillna(df_cluster[clustering_features].mean())\nprint(f\"\\nFeature Matrix Shape: {X_cluster.shape}\")\n\n\n\n\nDetermine Optimal K\n\n\nView elbow method code\n# Standardize features\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_cluster)\n\n# Test different numbers of clusters\nK_range = range(2, 11)\ninertias = []\nsilhouette_scores = []\n\nprint(\"Testing different numbers of clusters...\")\nprint(f\"{'k':&lt;5} {'Inertia':&lt;15} {'Silhouette Score'}\")\nprint(\"-\" * 40)\n\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(X_scaled)\n    inertias.append(kmeans.inertia_)\n    sil_score = silhouette_score(X_scaled, kmeans.labels_)\n    silhouette_scores.append(sil_score)\n    print(f\"{k:&lt;5} {kmeans.inertia_:&lt;15.2f} {sil_score:.4f}\")\n\noptimal_k = list(K_range)[silhouette_scores.index(max(silhouette_scores))]\nprint(f\"\\n💡 Optimal k based on Silhouette Score: {optimal_k}\")\n\n\n\n\nShow code\n# Visualize elbow curve and silhouette scores\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=('Elbow Method', 'Silhouette Score Method')\n)\n\nfig.add_trace(\n    go.Scatter(x=list(K_range), y=inertias, mode='lines+markers', \n               name='Inertia', line=dict(color='blue')),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=list(K_range), y=silhouette_scores, mode='lines+markers', \n               name='Silhouette', line=dict(color='orange')),\n    row=1, col=2\n)\n\nfig.update_xaxes(title_text=\"Number of Clusters (k)\", row=1, col=1)\nfig.update_xaxes(title_text=\"Number of Clusters (k)\", row=1, col=2)\nfig.update_yaxes(title_text=\"Inertia\", row=1, col=1)\nfig.update_yaxes(title_text=\"Silhouette Score\", row=1, col=2)\n\nfig.update_layout(\n    height=400, \n    showlegend=False, \n    template=\"plotly_white\",\n    title_text=\"Determining Optimal Number of Clusters\"\n)\nfig.show()\n\n\n\n\nCluster Analysis\n\n\nShow code\n# Perform KMeans with k=5 (per assignment requirements)\nn_clusters = 5\n\nprint(f\"Performing KMeans with k={n_clusters} clusters...\")\nkmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\ndf_cluster['cluster'] = kmeans.fit_predict(X_scaled)\n\nprint(f\"✓ Clustering complete!\")\nprint(f\"\\nCluster Distribution:\")\ncluster_counts = df_cluster['cluster'].value_counts().sort_index()\nfor cluster_id, count in cluster_counts.items():\n    pct = (count / len(df_cluster)) * 100\n    print(f\"  Cluster {cluster_id}: {count:,} jobs ({pct:.1f}%)\")\n\n\n\n\nShow code\n# Sample for performance (5000 points)\nsample_size = min(5000, len(df_cluster))\ndf_sample = df_cluster.sample(sample_size, random_state=42)\n\nfig = px.scatter(\n    df_sample,\n    x='SALARY',\n    y='STATE_encoded',\n    color='cluster',\n    hover_data=['TITLE', 'political_leaning', reference_label] if 'TITLE' in df_sample.columns else None,\n    title=f'KMeans Clustering Results (k={n_clusters}, n={sample_size:,} sample)',\n    labels={'SALARY': 'Annual Salary ($)', 'STATE_encoded': 'State (Encoded)', 'cluster': 'Cluster'},\n    color_continuous_scale='Viridis'\n)\nfig.update_layout(template=\"plotly_white\", height=550, font=dict(family=\"Roboto\", size=12))\nfig.show()\n\n\nKey Findings: - Cluster 0: Entry-level positions ($50-100k) - Cluster 4: Senior roles ($200k+) - Geographic clustering evident by state encoding\n\n\nShow code\n# Analyze cluster characteristics\nprint(\"=\"*80)\nprint(\"CLUSTER PROFILES\")\nprint(\"=\"*80)\n\ncluster_profiles = df_cluster.groupby('cluster').agg({\n    'SALARY': ['mean', 'median', 'std', 'min', 'max'],\n    'political_leaning': lambda x: x.mode()[0] if len(x.mode()) &gt; 0 else 'Mixed',\n    'cluster': 'count'\n})\n\ncluster_profiles.columns = [\n    'Avg_Salary', 'Median_Salary', 'Salary_StdDev', 'Min_Salary', 'Max_Salary',\n    'Dominant_Political', 'Count'\n]\n\ncluster_profiles = cluster_profiles.round(2)\nprint(cluster_profiles)\n\n\n\n\nShow code\n# Visualize cluster salary profiles\nprofile_df = cluster_profiles.reset_index()\n\nfig = px.bar(\n    profile_df,\n    x='cluster',\n    y='Avg_Salary',\n    text='Count',\n    title='Average Salary by Cluster',\n    labels={'cluster': 'Cluster', 'Avg_Salary': 'Average Salary ($)'},\n    color='Avg_Salary',\n    color_continuous_scale='Viridis'\n)\nfig.update_traces(texttemplate='n=%{text:,}', textposition='outside')\nfig.update_layout(template=\"plotly_white\", height=450, font=dict(family=\"Roboto\", size=12))\nfig.show()\n\n\n\n\nShow code\n# Compare clusters with reference labels\nprint(f\"\\n{'='*80}\")\nprint(f\"CLUSTER vs {reference_label.upper()} COMPARISON\")\nprint(f\"{'='*80}\")\n\nfor cluster_id in sorted(df_cluster['cluster'].unique()):\n    cluster_data = df_cluster[df_cluster['cluster'] == cluster_id]\n    top_categories = cluster_data[reference_label].value_counts().head(5)\n    \n    print(f\"\\n📊 Cluster {cluster_id}:\")\n    print(f\"   Size: {len(cluster_data):,} jobs\")\n    print(f\"   Avg Salary: ${cluster_data['SALARY'].mean():,.2f}\")\n    if 'political_leaning' in cluster_data.columns:\n        print(f\"   Dominant Political: {cluster_data['political_leaning'].mode()[0] if len(cluster_data['political_leaning'].mode()) &gt; 0 else 'Mixed'}\")\n    print(f\"   Top 5 {reference_label} categories:\")\n    for category, count in top_categories.items():\n        pct = (count / len(cluster_data)) * 100\n        print(f\"     • {category}: {count:,} ({pct:.1f}%)\")"
  },
  {
    "objectID": "ml_methods.html#multiple-regression-analysis",
    "href": "ml_methods.html#multiple-regression-analysis",
    "title": "ML Methods",
    "section": "Multiple Regression Analysis",
    "text": "Multiple Regression Analysis\n\n\nView feature engineering code\n# Prepare features for salary prediction\ndf_reg = df_clean.copy()\n\nprint(\"=\"*80)\nprint(\"FEATURE ENGINEERING FOR SALARY PREDICTION\")\nprint(\"=\"*80)\n\n# Encode categorical variables\nle_reg = {}\ncategorical_features = ['STATE', 'TITLE', 'political_leaning', 'LIGHTCAST_SECTORS']\n\n# Add SOC or NAICS if available\nif 'SOC_2' in df_reg.columns:\n    categorical_features.append('SOC_2')\nelif 'NAICS_2022_2' in df_reg.columns:\n    categorical_features.append('NAICS_2022_2')\n\nprint(f\"\\nCategorical features to encode ({len(categorical_features)}):\")\nfor col in categorical_features:\n    if col in df_reg.columns:\n        le = LabelEncoder()\n        df_reg[f'{col}_encoded'] = le.fit_transform(\n            df_reg[col].fillna('Unknown').astype(str)\n        )\n        le_reg[col] = le\n        print(f\"  ✓ {col}: {df_reg[col].nunique()} unique values\")\n\n# Select features for regression\nfeature_cols = []\nfor col in categorical_features:\n    encoded_col = f'{col}_encoded'\n    if encoded_col in df_reg.columns:\n        feature_cols.append(encoded_col)\n\n# Add numerical features if available\nnumeric_features = ['MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE']\nfor num_feat in numeric_features:\n    if num_feat in df_reg.columns:\n        df_reg[num_feat] = pd.to_numeric(df_reg[num_feat], errors='coerce')\n        if df_reg[num_feat].notna().sum() &gt; 0:\n            feature_cols.append(num_feat)\n            print(f\"  ✓ {num_feat}: numeric feature added\")\n\nprint(f\"\\n Total Features for Salary Prediction: {len(feature_cols)}\")\n\n# Prepare X and y\nX = df_reg[feature_cols].fillna(df_reg[feature_cols].mean())\ny = df_reg['SALARY']\n\nprint(f\"\\n Dataset Statistics:\")\nprint(f\"  • Feature Matrix Shape: {X.shape}\")\nprint(f\"  • Salary Statistics:\")\nprint(f\"    - Mean: ${y.mean():,.2f}\")\nprint(f\"    - Median: ${y.median():,.2f}\")\nprint(f\"    - Std Dev: ${y.std():,.2f}\")\nprint(f\"    - Range: ${y.min():,.2f} - ${y.max():,.2f}\")\n\n\nFeature Selection Justification: The features were selected based on their theoretical and empirical relationship with salary:\nSTATE & Political Leaning: Geographic location and political climate influence cost of living and compensation policies TITLE: Job title is the primary indicator of role level and responsibility LIGHTCAST_SECTORS: Industry sector determines baseline compensation structure SOC/NAICS: Occupation classification provides standardized job categorization Years of Experience: Direct correlation with salary progression (if available)\n\n\nShow code\n# Split data (70/30 as per assignment requirements)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.30, random_state=42\n)\n\nprint(\"=\"*80)\nprint(\"TRAIN/TEST SPLIT\")\nprint(\"=\"*80)\nprint(f\"\\nTraining Set: {X_train.shape[0]:,} samples ({X_train.shape[0]/len(X)*100:.1f}%)\")\nprint(f\"Test Set: {X_test.shape[0]:,} samples ({X_test.shape[0]/len(X)*100:.1f}%)\")\nprint(f\"\\nSalary Distribution:\")\nprint(f\"  Training - Mean: ${y_train.mean():,.2f}, Std: ${y_train.std():,.2f}\")\nprint(f\"  Test - Mean: ${y_test.mean():,.2f}, Std: ${y_test.std():,.2f}\")\n\n\n\n\nView Linear Regression code\nprint(\"=\"*80)\nprint(\"MODEL 1: MULTIPLE LINEAR REGRESSION\")\nprint(\"=\"*80)\n\n# Train model\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\n\n# Make predictions\ny_pred_lin = lin_reg.predict(X_test)\n\n# Calculate evaluation metrics\nrmse_lin = np.sqrt(mean_squared_error(y_test, y_pred_lin))\nr2_lin = r2_score(y_test, y_pred_lin)\nmae_lin = np.mean(np.abs(y_test - y_pred_lin))\n\nprint(f\"\\n📊 Model Performance:\")\nprint(f\"   • R² Score: {r2_lin:.4f}\")\nprint(f\"     → Explains {r2_lin*100:.2f}% of salary variance\")\nprint(f\"   • RMSE: ${rmse_lin:,.2f}\")\nprint(f\"   • MAE: ${mae_lin:,.2f}\")\n\n# Feature coefficients\ncoef_df = pd.DataFrame({\n    'Feature': feature_cols,\n    'Coefficient': lin_reg.coef_\n}).sort_values('Coefficient', key=abs, ascending=False)\n\nprint(f\"\\n📈 Top 10 Most Influential Features:\")\nprint(coef_df.head(10).to_string(index=False))\n\n\n\n\nShow code\n# Visualize top 15 feature coefficients\ntop_features = coef_df.head(15)\n\nfig = px.bar(\n    top_features,\n    x='Coefficient',\n    y='Feature',\n    orientation='h',\n    title='Top 15 Feature Coefficients - Multiple Linear Regression',\n    labels={'Coefficient': 'Impact on Salary ($)', 'Feature': 'Feature'},\n    color='Coefficient',\n    color_continuous_scale='RdBu',\n    color_continuous_midpoint=0\n)\n\nfig.update_layout(template=\"plotly_white\", height=500, font=dict(family=\"Roboto\", size=12))\nfig.show()\n\n\n\n\nView Random Forest code\nprint(\"=\"*80)\nprint(\"MODEL 2: RANDOM FOREST REGRESSION\")\nprint(\"=\"*80)\n\n# Train model\nrf_reg = RandomForestRegressor(\n    n_estimators=100,\n    max_depth=20,\n    min_samples_split=10,\n    min_samples_leaf=4,\n    random_state=42,\n    n_jobs=-1\n)\n\nprint(\"Training Random Forest model...\")\nrf_reg.fit(X_train, y_train)\nprint(\"✓ Training complete!\")\n\n# Make predictions\ny_pred_rf = rf_reg.predict(X_test)\n\n# Calculate evaluation metrics\nrmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\nr2_rf = r2_score(y_test, y_pred_rf)\nmae_rf = np.mean(np.abs(y_test - y_pred_rf))\n\nprint(f\"\\n Model Performance:\")\nprint(f\"   • R² Score: {r2_rf:.4f}\")\nprint(f\"     → Explains {r2_rf*100:.2f}% of salary variance\")\nprint(f\"   • RMSE: ${rmse_rf:,.2f}\")\nprint(f\"   • MAE: ${mae_rf:,.2f}\")\n\n# Feature importance\nimportance_df = pd.DataFrame({\n    'Feature': feature_cols,\n    'Importance': rf_reg.feature_importances_\n}).sort_values('Importance', ascending=False)\n\nprint(f\"\\n Top 10 Most Important Features:\")\nprint(importance_df.head(10).to_string(index=False))\n\n# Calculate improvement safely\nif r2_lin &gt; 0:\n    improvement = ((r2_rf - r2_lin) / r2_lin) * 100\n    print(f\"\\n🚀 Random Forest improves R² by {improvement:.1f}% over Linear Regression\")\n\n\n\n\nShow code\n# Visualize feature importance\ntop_features_rf = importance_df.head(15)\n\nfig = px.bar(\n    top_features_rf,\n    x='Importance',\n    y='Feature',\n    orientation='h',\n    title='Top 15 Feature Importance - Random Forest Regression',\n    labels={'Importance': 'Importance Score', 'Feature': 'Feature'},\n    color='Importance',\n    color_continuous_scale='Viridis'\n)\n\nfig.update_layout(template=\"plotly_white\", height=500, font=dict(family=\"Roboto\", size=12))\nfig.show()\n\n\n\n\nShow code\nprint(\"=\"*80)\nprint(\"REGRESSION MODEL COMPARISON\")\nprint(\"=\"*80)\n\n# Create comparison dataframe\ncomparison_df = pd.DataFrame({\n    'Model': ['Multiple Linear Regression', 'Random Forest Regression'],\n    'R² Score': [r2_lin, r2_rf],\n    'RMSE ($)': [rmse_lin, rmse_rf],\n    'MAE ($)': [mae_lin, mae_rf]\n})\n\nprint(\"\\n\" + comparison_df.to_string(index=False))\n\nbest_model = comparison_df.loc[comparison_df['R² Score'].idxmax(), 'Model']\nbest_r2 = comparison_df['R² Score'].max()\n\nprint(f\"\\n🏆 Best Performing Model: {best_model}\")\nprint(f\"   • Achieves R² of {best_r2:.4f}\")\nprint(f\"   • Explains {best_r2*100:.2f}% of salary variance\")\n\n\n\n\nShow code\n# Sample for performance\nsample_size = min(2000, len(y_test))\nindices = np.random.choice(len(y_test), sample_size, replace=False)\n\ncomparison_results = pd.DataFrame({\n    'Actual': y_test.iloc[indices],\n    'Linear_Regression': y_pred_lin[indices],\n    'Random_Forest': y_pred_rf[indices]\n})\n\nfig = go.Figure()\n\n# Random Forest predictions\nfig.add_trace(go.Scatter(\n    x=comparison_results['Actual'],\n    y=comparison_results['Random_Forest'],\n    mode='markers',\n    name='Random Forest',\n    opacity=0.6,\n    marker=dict(size=5, color='blue')\n))\n\n# Linear Regression predictions\nfig.add_trace(go.Scatter(\n    x=comparison_results['Actual'],\n    y=comparison_results['Linear_Regression'],\n    mode='markers',\n    name='Linear Regression',\n    opacity=0.6,\n    marker=dict(size=5, color='red')\n))\n\n# Perfect prediction line\nmin_val = comparison_results['Actual'].min()\nmax_val = comparison_results['Actual'].max()\n\nfig.add_trace(go.Scatter(\n    x=[min_val, max_val],\n    y=[min_val, max_val],\n    mode='lines',\n    name='Perfect Prediction',\n    line=dict(color='green', dash='dash', width=2)\n))\n\nfig.update_layout(\n    title=f'Actual vs Predicted Salary - Model Comparison (n={sample_size:,})',\n    xaxis_title='Actual Salary ($)',\n    yaxis_title='Predicted Salary ($)',\n    template=\"plotly_white\",\n    height=550,\n    hovermode='closest'\n)\n\nfig.show()"
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skills Gap Analysis",
    "section": "",
    "text": "Setting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n25/10/11 16:17:31 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n25/10/11 16:17:32 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.\n[Stage 1:&gt;                                                          (0 + 1) / 1]                                                                                25/10/11 16:17:42 WARN SparkStringUtils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting 'spark.sql.debug.maxToStringFields'.\n\n\n\n\n\n\n\n\n\n\n\nPython\nJava\nSQL\nPower BI\nMachine Learning\nCloud Computing\n\n\nName\n\n\n\n\n\n\n\n\n\n\nEmily\n2\n2\n2\n4\n1\n2\n\n\nPranathi\n1\n1\n1\n4\n1\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Stage 2:&gt;                                                          (0 + 1) / 1]                                                                                \n\n\n\n\n\n\n\n\n\nPython\nJava\nSQL\nPower BI\nMachine Learning\nCloud Computing\n\n\nName\n\n\n\n\n\n\n\n\n\n\nEmily\n2\n2\n2\n4\n1\n2\n\n\nPranathi\n1\n1\n1\n4\n1\n2\n\n\nJob Postings Count\n12350\n4470\n0\n10850\n4324\n2555\n\n\n\n\n\n\n\nBased on our Skills Gap Analysis, we need to work on our Python skills. In order to be more competitive in the job market, we will finish the Python DataCamp and practice incorporating our new skills into our current roles."
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "This code initializes a PySpark environment to load and explore a dataset of job postings. It begins by importing and starting a Spark session named “JobPostingsAnalysis”, then reads a CSV file (lightcast_job_postings.csv) into a Spark DataFrame with headers, schema inference, and support for multi-line fields. The DataFrame is registered as a temporary SQL view called “job_postings” to enable SQL-style queries. Finally, it performs a basic diagnostic check by printing the schema and previewing the first five rows of data—steps that are intended for local debugging and should be commented out when rendering the final submission.\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nfrom pyspark.sql import SparkSession\nimport re\nimport numpy as np\nimport plotly.graph_objects as go\nfrom pyspark.sql.functions import col, split, explode, regexp_replace, transform, when\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import col, monotonically_increasing_id\n\nnp.random.seed(42)\n\npio.renderers.default = \"notebook\"\n\nspark = SparkSession.builder.appName(\"LightcastData\").getOrCreate()\n\njobs_df = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").option(\"escape\", \"\\\"\").csv(\"./data/lightcast_job_postings.csv\")\njobs_df.createOrReplaceTempView(\"job_postings\")\n\nelections_df = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").option(\"escape\", \"\\\"\").csv(\"./data/2024_election_results.csv\")\nelections_df.createOrReplaceTempView(\"election_results\")\n\n#print(\"---This is Diagnostic check, No need to print it in the final doc---\")\n\n#df.printSchema() # comment this line when rendering the submission\n#jobs_df.show(5)\n#elections_df.show(5)"
  },
  {
    "objectID": "data_cleaning.html#load-the-dataset",
    "href": "data_cleaning.html#load-the-dataset",
    "title": "Data Cleaning",
    "section": "",
    "text": "This code initializes a PySpark environment to load and explore a dataset of job postings. It begins by importing and starting a Spark session named “JobPostingsAnalysis”, then reads a CSV file (lightcast_job_postings.csv) into a Spark DataFrame with headers, schema inference, and support for multi-line fields. The DataFrame is registered as a temporary SQL view called “job_postings” to enable SQL-style queries. Finally, it performs a basic diagnostic check by printing the schema and previewing the first five rows of data—steps that are intended for local debugging and should be commented out when rendering the final submission.\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nfrom pyspark.sql import SparkSession\nimport re\nimport numpy as np\nimport plotly.graph_objects as go\nfrom pyspark.sql.functions import col, split, explode, regexp_replace, transform, when\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import col, monotonically_increasing_id\n\nnp.random.seed(42)\n\npio.renderers.default = \"notebook\"\n\nspark = SparkSession.builder.appName(\"LightcastData\").getOrCreate()\n\njobs_df = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").option(\"escape\", \"\\\"\").csv(\"./data/lightcast_job_postings.csv\")\njobs_df.createOrReplaceTempView(\"job_postings\")\n\nelections_df = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").option(\"escape\", \"\\\"\").csv(\"./data/2024_election_results.csv\")\nelections_df.createOrReplaceTempView(\"election_results\")\n\n#print(\"---This is Diagnostic check, No need to print it in the final doc---\")\n\n#df.printSchema() # comment this line when rendering the submission\n#jobs_df.show(5)\n#elections_df.show(5)"
  }
]